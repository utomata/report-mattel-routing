steps:
  # Get Google Maps API Key from Secret Manager
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud secrets versions access latest --secret="google-maps-api-key" > /workspace/google_maps_key.txt
        echo "API Key retrieved: $(cat /workspace/google_maps_key.txt | cut -c1-10)..."

  # Build Web App image with unique tag
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        GOOGLE_MAPS_KEY=$(cat /workspace/google_maps_key.txt)
        docker build \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --build-arg VITE_API_BASE_URL= \
          --build-arg VITE_GOOGLE_MAPS_API_KEY="$$GOOGLE_MAPS_KEY" \
          -f apps/web/Dockerfile \
          -t us-central1-docker.pkg.dev/$PROJECT_ID/mattel-routing/web-app:$SHORT_SHA \
          -t us-central1-docker.pkg.dev/$PROJECT_ID/mattel-routing/web-app:latest \
          .
    env:
      - 'DOCKER_BUILDKIT=1'

  # Build FastAPI image with unique tag
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '-f', 'apps/backend/Dockerfile',
      '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/mattel-routing/fastapi-app:$SHORT_SHA',
      '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/mattel-routing/fastapi-app:latest',
      '.'
    ]

  # Push Web App images
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'push',
      'us-central1-docker.pkg.dev/$PROJECT_ID/mattel-routing/web-app:$SHORT_SHA'
    ]

  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'push',
      'us-central1-docker.pkg.dev/$PROJECT_ID/mattel-routing/web-app:latest'
    ]

  # Push FastAPI images
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'push',
      'us-central1-docker.pkg.dev/$PROJECT_ID/mattel-routing/fastapi-app:$SHORT_SHA'
    ]

  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'push',
      'us-central1-docker.pkg.dev/$PROJECT_ID/mattel-routing/fastapi-app:latest'
    ]

  # Update cloud-run.yaml with specific image tags
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        sed -i "s|web-app:latest|web-app:$SHORT_SHA|g" cloud-run.yaml
        sed -i "s|fastapi-app:latest|fastapi-app:$SHORT_SHA|g" cloud-run.yaml
        echo "Updated cloud-run.yaml:"
        cat cloud-run.yaml

  # Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args: [
      'run',
      'services',
      'replace',
      'cloud-run.yaml',
      '--region=us-central1',
      '--project=$PROJECT_ID'
    ]

# Store images in Artifact Registry
images:
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/mattel-routing/web-app:$SHORT_SHA'
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/mattel-routing/web-app:latest'
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/mattel-routing/fastapi-app:$SHORT_SHA'
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/mattel-routing/fastapi-app:latest'

# Service account for the build
serviceAccount: 'projects/$PROJECT_ID/serviceAccounts/cloud-build-deploy@casual-athenas-25xa7.iam.gserviceaccount.com'

# Options for logging
options:
  logging: CLOUD_LOGGING_ONLY

# Timeout for the build
timeout: '1200s' 